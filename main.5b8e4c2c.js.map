{"version":3,"sources":["scripts/main.js"],"names":["baseURL","detailsURL","insertDataintoDOM","array","div","document","createElement","insertAdjacentHTML","map","element","name","join","body","append","getPhones","promise","Promise","resolve","reject","setTimeout","Error","fetch","then","response","ok","json","status","getPhonesDetails","iDs","phoneDetails","indx","length","uRL","result","headers","get","includes","details","push","id","console","log","catch","error","warn"],"mappings":";AAAA,aAEA,MAAMA,EAAU,wEACVC,EAAa,oEAEbC,EAAqBC,IACnBC,MAAAA,EAAMC,SAASC,cAAc,OAEnCF,EAAIG,mBAAmB,YACdJ,OAAAA,OAAAA,EAAMK,IAAIC,GAEXA,iBAAAA,OAAAA,EAAQC,KAFP,oBAGKC,KAAK,IAJnB,gBAMAN,SAASO,KAAKC,OAAOT,IAGvB,SAASU,IAaAC,OAZS,IAAIC,QAAQ,SAASC,EAASC,GAC5CC,WAAW,KACTD,EAAO,IAAIE,MAAM,6BAChB,KAEHH,EAAQI,MAASrB,GAAAA,OAAAA,IACdsB,KAAKC,GACKA,EAASC,GACdR,QAAQC,QAAQM,EAASE,QADLT,QAAQE,OAAO,IAAIE,MAASG,GAAAA,OAAAA,EAASG,cAQrEZ,IACGQ,KAAKC,IAgCGI,OA7BQA,eAAiBC,GACxBC,MAAAA,EAAe,GAEhB,IAAA,IAAIC,EAAO,EAAGA,EAAOF,EAAIG,OAAQD,IAAQ,CACtCE,MAAAA,EAAS/B,GAAAA,OAAAA,GAAa2B,OAAAA,EAAIE,GAAhC,SACMG,QAAeZ,MAAMW,GAEvB,IAACC,EAAOT,IAAwB,MAAlBS,EAAOP,OAChB,OAAA,IAAIV,QAAQ,SAASC,EAASC,GACnCA,EAAO,IAAIE,MAASG,GAAAA,OAAAA,EAASG,YAI7B,IAACO,EAAOC,QAAQC,IAAI,gBAAgBC,SAAS,oBACxC,OAAA,IAAIpB,QAAQ,SAASC,EAASC,GACnCA,EAAO,IAAIE,MAAL,oCAIJiB,MAAAA,QAAgBJ,EAAOR,OAE7BI,EAAaS,KAAKD,GAKbR,OAFP3B,EAAkB2B,GAEXA,EAGFF,CA/BYJ,EAASf,IAAIC,GAAWA,EAAQ8B,OAiCpDjB,KAAKW,GAAUO,QAAQC,IAAIR,EAAQ,YACnCS,MAAMC,GAASH,QAAQI,KAAKD","file":"main.5b8e4c2c.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst baseURL = 'https://mate-academy.github.io/phone-catalogue-static/api/phones.json';\nconst detailsURL = 'https://mate-academy.github.io/phone-catalogue-static/api/phones/';\n\nconst insertDataintoDOM = (array) => {\n  const div = document.createElement('div');\n\n  div.insertAdjacentHTML('beforeend',\n    `<ul>${array.map(element =>\n      `<li>\n        ${element.name}\n        </li>`).join('')}\n    </ul>`);\n  document.body.append(div);\n};\n\nfunction getPhones() {\n  const promise = new Promise(function(resolve, reject) {\n    setTimeout(() => {\n      reject(new Error('Rejected within timeout'));\n    }, 5000);\n\n    resolve(fetch(`${baseURL}`)\n      .then(response => {\n        return (!response.ok) ? Promise.reject(new Error(`${response.status}`))\n          : Promise.resolve(response.json());\n      }));\n  });\n\n  return promise;\n}\n\ngetPhones()\n  .then(response => {\n    const arrayOfIDs = response.map(element => element.id);\n\n    async function getPhonesDetails(iDs) {\n      const phoneDetails = [];\n\n      for (let indx = 0; indx < iDs.length; indx++) {\n        const uRL = `${detailsURL}${iDs[indx]}.json`;\n        const result = await fetch(uRL);\n\n        if (!result.ok && result.status === 404) {\n          return new Promise(function(resolve, reject) {\n            reject(new Error(`${response.status}`));\n          });\n        }\n\n        if (!result.headers.get('content-type').includes('application/json')) {\n          return new Promise(function(resolve, reject) {\n            reject(new Error(`Content type is not supported`));\n          });\n        }\n\n        const details = await result.json();\n\n        phoneDetails.push(details);\n      }\n\n      insertDataintoDOM(phoneDetails);\n\n      return phoneDetails;\n    }\n\n    return getPhonesDetails(arrayOfIDs);\n  })\n  .then(result => console.log(result, 'success'))\n  .catch(error => console.warn(error));\n"]}